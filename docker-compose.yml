version: "3.9"
services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: ["CMD", "mongosh", "--quiet", "--eval", "db.runCommand({ ping: 1 }).ok"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-net

  mongo:
    image: mongo
    ports:
      - "27017:27017"
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-net

  mysql:
    image: mysql:8.0
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: geodb
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend-net

  auth_service:
    build: ./services/auth_service
    ports:
      - "8001:8000"
    volumes:
      - ./services/auth_service:/app
    environment:
      RABBITMQ_HOST: rabbitmq
      MYSQL_USER: root
      MYSQL_PASSWORD: rootpassword
      MYSQL_DATABASE: geodb
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      JWT_SECRET_KEY: verysecretkey1234
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-net

  game_service:
    build: ./services/game_service
    ports:
      - "8002:8000"
    volumes:
      - ./services/game_service:/app
    environment:
      RABBITMQ_HOST: rabbitmq
      DB_HOST: localhost
      DB_PORT: 3306
      MONGO_URI: mongodb://mongo:27017
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-net

  image_service:
    build: ./services/image_service
    ports:
      - "8003:8000"
    volumes:
      - ./services/image_service:/app
    environment:
      RABBITMQ_HOST: rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-net

  score_service:
    build: ./services/score_service
    ports:
      - "8004:8000"
    volumes:
      - ./services/score_service:/app
    environment:
      RABBITMQ_HOST: rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-net

  notification_service:
    build: ./services/notification_service
    ports:
      - "8005:8000"
    volumes:
      - ./services/notification_service:/app
    environment:
      RABBITMQ_HOST: rabbitmq
    depends_on:
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-net

  leaderboard_service:
    build: ./services/leaderboards
    ports:
      - "8006:8000"  # Optional: if you want API access
    volumes:
      - ./services/leaderboards:/app
    environment:
      MONGO_URI: mongodb://mongo:27017
      MAIL_HOST: smtp.mailgun.org
      MAIL_PORT: 587
      MAIL_USER: postmaster@sandboxNNN.mailgun.org
      MAIL_PASS: your-smtp-password
      FROM_ADDR: noreply@mygame.com
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      CHECK_FREQ: 30
    depends_on:
      mongo:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - backend-net

  leaderboard_worker:
    build: ./services/leaderboards
    command: celery -A app.tasks worker --beat --loglevel=info
    environment:
      REDITS_HOST: redis
      MONGO_URI: mongodb://mongo:27017
      RABBITMQ_HOST: rabbitmq
      RABBITMQ_USER: guest
      RABBITMQ_PASS: guest
      MAIL_HOST: smtp.mailgun.org
      MAIL_PORT: 587
      MAIL_USER: postmaster@sandboxNNN.mailgun.org
      MAIL_PASS: your-smtp-password
      FROM_ADDR: noreply@mygame.com
      CHECK_FREQ: 30
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
    networks:
      - backend-net



networks:
  backend-net:
    driver: bridge
